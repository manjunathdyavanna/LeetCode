/*Hard
 *Runtime: 0 ms, faster than 100% of Java online submissions for Reverse Nodes in k-Group.
 *Memory Usage: 42.1 MB, less than 80% of Java online submissions for Reverse Nodes in k-Group.
 *
 * Q :: Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
 *  k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple 
 *  of k then left-out nodes, in the end, should remain as it is.
 * ex:- Input: head = [1,2,3,4,5], k = 2 +> Output: [2,1,4,3,5]
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if( k==1 || head.next==null )
            return head;
            
        ListNode start = head;
        ListNode tmp1 = head;             //tmp1, tmp2 and tmp3 are used to revers the link b/w tmp1 and tmp2
        ListNode tmp2 = tmp1.next;
        ListNode tmp3 = tmp2.next;
        ListNode prvSatrt = null;      //stores previous start to link it with kth element after switching k ele
        for(int i=1; i<k; i++){          // this loop revers the k-1 links b/w k elements
            tmp2.next = tmp1;             // at the end of the loop tmp1 points to kth element and tmp2 points to k+1 element
            tmp1 = tmp2;                // this loop revers the k-1 links b/w k elements
            tmp2 = tmp3;
            tmp3 = tmp3!=null ? tmp3.next : tmp3;  // to avoid exception
        }                   
        prvSatrt = head;
        head = tmp1;
        start.next = tmp2;
        start = tmp2;
        ListNode end = tmp2;
        while(start!=null){
            for(int i=1; i<=k; i++){
                end = end.next;                //this is just to find if there are next k elemnts to change
                if(end==null && i!=k)			// if the remaining elements are less than k than return
                    return head;
            }
            tmp1 = start;
            tmp2 = tmp1.next;
            tmp3 = tmp2.next;
            for(int i=1; i<k; i++){
                tmp2.next = tmp1;			// this loop revers the k-1 links b/w k elements
                tmp1 = tmp2;
                tmp2 = tmp3;
                tmp3 = tmp3!=null ? tmp3.next : tmp3;
            }
            prvSatrt.next = tmp1;
            prvSatrt = start;
            start.next = end;
            start = end;
        }
        
        return head;
    }
}
