//Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.
//Memory Usage: 42.2 MB, less than 18.12% of Java online submissions for Swap Nodes in Pairs.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(null==head || head.next==null)
            return head;
        ListNode temp = head;                           // to hold even nodes
        ListNode temp1 = temp.next;                     // to hold odd nodes
        ListNode temp2 = temp1.next;                    // to hold 3rd node to link after swapping
        temp.next = temp2;  
        temp1.next = temp;
        head = temp1;
        ListNode temp3 = temp;                          // to hold even node after swapping to link next 2 nodes after swapping
        temp = temp2;
        while(temp!=null){
            temp1 = temp.next;  
            if(temp1!=null){
                temp2 = temp1.next;                     
                temp.next = temp2;                       // making temp to point to even
                temp1.next = temp;                        // making odd to point to prev even
                temp3.next = temp1;                        
                temp3 = temp;                           // holding swapped even node
            }
            temp = temp.next;    
        }
        return head;
        
    }
}
